{
    "hints": {
        "bootstrap()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "Sell chametz(byte[])void": {
            "call_config": {
                "opt_in": "CALL"
            }
        },
        "Repurchase chametz()void": {
            "call_config": {
                "close_out": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZGVjaGFtZXR6LmNvbnRyYWN0LkRlY2hhbWV0ei5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc21hcnRfY29udHJhY3RzL2RlY2hhbWV0ei9jb250cmFjdC5weToyNgogICAgLy8gY2xhc3MgRGVjaGFtZXR6KEFSQzRDb250cmFjdCk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 1,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "is_jewish": {
                    "type": "bytes",
                    "key": "is_jewish"
                },
                "token_asset_id": {
                    "type": "uint64",
                    "key": "token_asset_id"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "chametz_sold": {
                    "type": "bytes",
                    "key": "chametz_sold",
                    "descr": "Description of the chametz sold"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "Dechametz",
        "methods": [
            {
                "name": "bootstrap",
                "args": [],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "Sell chametz",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "chametz"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "Repurchase chametz",
                "args": [],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}